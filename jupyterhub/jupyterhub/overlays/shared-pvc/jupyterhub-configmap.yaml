- op: replace
  path: /data/jupyterhub_config.py
  value: |
    def pvc_mounts(spawner,pod):
      # Apply profile from singleuser-profiles
      apply_pod_profile(spawner, pod)

      # Get private_users and secret_users lists, plus admins for R/W access
      private_users=spawner.single_user_profiles.read_config_map('jupyterhub-groups','private_users')
      iphis_users=spawner.single_user_profiles.read_config_map('jupyterhub-groups','iphis_users')
      ccso_users=spawner.single_user_profiles.read_config_map('jupyterhub-groups','ccso_users')


      # Set R/W mode only for admins
      admins=spawner.single_user_profiles.read_config_map('jupyterhub-groups','admins')
      readOnly_flag = False if spawner.user.name in admins else True

      # Mount volumes according to membership

      # Public data (no membership test)
      pod.spec.volumes.append(dict(name='hmf-data-public',persistentVolumeClaim=dict(claimName='hmf-data-public')))
      pod.spec.containers[0].volume_mounts.append(dict(name='hmf-data-public',mountPath='/opt/app-root/src/data/public',readOnly=readOnly_flag))

      # Private data
      if spawner.user.name in private_users:
        pod.spec.volumes.append(dict(name='hmf-data-confidential',persistentVolumeClaim=dict(claimName='hmf-data-confidential')))
        pod.spec.containers[0].volume_mounts.append(dict(name='hmf-data-confidential',mountPath='/opt/app-root/src/data/confidential',readOnly=readOnly_flag))

      # Secret data
      if spawner.user.name in iphis_users:
        pod.spec.volumes.append(dict(name='hmf-data-restricted-raw-moh',persistentVolumeClaim=dict(claimName='hmf-data-restricted-raw-moh')))
        pod.spec.containers[0].volume_mounts.append(dict(name='hmf-data-restricted-raw-moh',mountPath='/opt/app-root/src/data/restricted/raw/moh',readOnly=readOnly_flag))

        pod.spec.volumes.append(dict(name='hmf-data-restricted-processed-moh',persistentVolumeClaim=dict(claimName='hmf-data-processed-raw-moh')))
        pod.spec.containers[0].volume_mounts.append(dict(name='hmf-processed-restricted-raw-moh',mountPath='/opt/app-root/src/data/restricted/processed/moh',readOnly=readOnly_flag))

      if spawner.user.name in ccso_users:
        pod.spec.volumes.append(dict(name='hmf-data-restricted-raw-ccso',persistentVolumeClaim=dict(claimName='hmf-data-restricted-raw-ccso')))
        pod.spec.containers[0].volume_mounts.append(dict(name='hmf-data-restricted-raw-ccso',mountPath='/opt/app-root/src/data/restricted/raw/ccso',readOnly=readOnly_flag))

        pod.spec.volumes.append(dict(name='hmf-data-restricted-processed-ccso',persistentVolumeClaim=dict(claimName='hmf-data-restricted-processed-ccso')))
        pod.spec.containers[0].volume_mounts.append(dict(name='hmf-data-restricted-processed-ccso',mountPath='/opt/app-root/src/data/restricted/processed/ccso',readOnly=readOnly_flag))

      # Function modify_pod_hook must return the pod instance
      return pod

    c.OpenShiftSpawner.modify_pod_hook = pvc_mounts

- op: replace
  path: /data/jupyterhub_admins
  value: "$(jupyterhub_admins)"

- op: replace
  path: /data/singleuser_pvc_size
  value: "$(singleuser_pvc_size)"
